<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20212.21.0605.1023                               -->
<workbook original-version='18.1' source-build='2021.2.0 (20212.21.0605.1023)' source-platform='mac' version='18.1' xml:base='https://public.tableau.com' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <DashboardGridOverlay />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelExtractV2.true...ObjectModelExtractV2 />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
  </document-format-change-manifest>
  <repository-location id='CoronavirusCOVID-19DeathsandInfectionRate' path='/workbooks' revision='1.1' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='Death Count Per Population' inline='true' name='federated.098nm4v0nec8mj14rutql1l9vilv' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='sunk-sqou-pout-ghig.database.windows.net' name='sqlserver.1aw6rqm1cly6se153lnwh0q2p1r5'>
            <connection authentication='sspi' class='sqlserver' dbname='Coronavirus (COVID-19) Deaths' odbc-native-protocol='yes' one-time-sql='' server='sunk-sqou-pout-ghig.database.windows.net' username='manager01' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='sqlserver.1aw6rqm1cly6se153lnwh0q2p1r5' name='death_count_per_pop' table='[dbo].[death_count_per_pop]' type='table' />
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='sqlserver.1aw6rqm1cly6se153lnwh0q2p1r5' name='death_count_per_pop' table='[dbo].[death_count_per_pop]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[death_count_per_pop]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>50</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[death_count_per_pop_A768BA85737D42D8AE6A4AF79294E0CA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_death_count</remote-name>
            <remote-type>3</remote-type>
            <local-name>[total_death_count]</local-name>
            <parent-name>[death_count_per_pop]</parent-name>
            <remote-alias>total_death_count</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[death_count_per_pop_A768BA85737D42D8AE6A4AF79294E0CA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <_.fcp.ObjectModelTableType.true...column caption='death_count_per_pop' datatype='table' name='[__tableau_internal_object_id__].[death_count_per_pop_A768BA85737D42D8AE6A4AF79294E0CA]' role='measure' type='quantitative' />
      <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
      <column caption='Total Death Count' datatype='integer' name='[total_death_count]' role='measure' type='quantitative' />
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='/Users/john/git/github/repositories/Coronavirus_COVID-19_Deaths/Death Count Per Population.hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='07/11/2021 08:59:28 PM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='Death Count Per Population' increment-value='%null%' refresh-type='create' rows-inserted='228' timestamp-start='2021-07-11 20:59:28.120' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>location</remote-name>
              <remote-type>129</remote-type>
              <local-name>[location]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>location</remote-alias>
              <ordinal>0</ordinal>
              <family>death_count_per_pop</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>228</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>total_death_count</remote-name>
              <remote-type>20</remote-type>
              <local-name>[total_death_count]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>total_death_count</remote-alias>
              <ordinal>1</ordinal>
              <family>death_count_per_pop</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>186</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='death_count_per_pop' id='death_count_per_pop_A768BA85737D42D8AE6A4AF79294E0CA'>
            <properties context=''>
              <relation connection='sqlserver.1aw6rqm1cly6se153lnwh0q2p1r5' name='death_count_per_pop' table='[dbo].[death_count_per_pop]' type='table' />
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='Global Numbers' inline='true' name='federated.0lz6pr70qkcq3u11zhke918ey9q8' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='sunk-sqou-pout-ghig.database.windows.net' name='sqlserver.17goapu0iqy9dk19zrdvq0l5pkel'>
            <connection authentication='sspi' class='sqlserver' dbname='Coronavirus (COVID-19) Deaths' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='sunk-sqou-pout-ghig.database.windows.net' username='manager01' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='sqlserver.17goapu0iqy9dk19zrdvq0l5pkel' name='global_numbers' table='[dbo].[global_numbers]' type='table' />
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='sqlserver.17goapu0iqy9dk19zrdvq0l5pkel' name='global_numbers' table='[dbo].[global_numbers]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>total_cases</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_cases]</local-name>
            <parent-name>[global_numbers]</parent-name>
            <remote-alias>total_cases</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[global_numbers_C97DEF105D234FE2AC920EF25FB3E2BB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_deaths</remote-name>
            <remote-type>3</remote-type>
            <local-name>[total_deaths]</local-name>
            <parent-name>[global_numbers]</parent-name>
            <remote-alias>total_deaths</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[global_numbers_C97DEF105D234FE2AC920EF25FB3E2BB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>death_percentage</remote-name>
            <remote-type>5</remote-type>
            <local-name>[death_percentage]</local-name>
            <parent-name>[global_numbers]</parent-name>
            <remote-alias>death_percentage</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[global_numbers_C97DEF105D234FE2AC920EF25FB3E2BB]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <_.fcp.ObjectModelTableType.true...column caption='global_numbers' datatype='table' name='[__tableau_internal_object_id__].[global_numbers_C97DEF105D234FE2AC920EF25FB3E2BB]' role='measure' type='quantitative' />
      <column caption='Death Percentage' datatype='real' name='[death_percentage]' role='measure' type='quantitative' />
      <column caption='Total Cases' datatype='real' name='[total_cases]' role='measure' type='quantitative' />
      <column caption='Total Deaths' datatype='integer' name='[total_deaths]' role='measure' type='quantitative' />
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='/Users/john/git/github/repositories/Coronavirus_COVID-19_Deaths/Global Numbers.hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='07/11/2021 09:00:03 PM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='Global Numbers' increment-value='%null%' refresh-type='create' rows-inserted='1' timestamp-start='2021-07-11 21:00:03.726' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>total_cases</remote-name>
              <remote-type>5</remote-type>
              <local-name>[total_cases]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>total_cases</remote-alias>
              <ordinal>0</ordinal>
              <family>global_numbers</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>total_deaths</remote-name>
              <remote-type>20</remote-type>
              <local-name>[total_deaths]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>total_deaths</remote-alias>
              <ordinal>1</ordinal>
              <family>global_numbers</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>death_percentage</remote-name>
              <remote-type>5</remote-type>
              <local-name>[death_percentage]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>death_percentage</remote-alias>
              <ordinal>2</ordinal>
              <family>global_numbers</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='global_numbers' id='global_numbers_C97DEF105D234FE2AC920EF25FB3E2BB'>
            <properties context=''>
              <relation connection='sqlserver.17goapu0iqy9dk19zrdvq0l5pkel' name='global_numbers' table='[dbo].[global_numbers]' type='table' />
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='Infection Rate Per Population By Date' inline='true' name='federated.0u1ua821g7yitl1anssln1msns0r' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='sunk-sqou-pout-ghig.database.windows.net' name='sqlserver.0zkz4gs0iyadev1g24sfl1imrufw'>
            <connection authentication='sspi' class='sqlserver' dbname='Coronavirus (COVID-19) Deaths' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='sunk-sqou-pout-ghig.database.windows.net' username='manager01' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='sqlserver.0zkz4gs0iyadev1g24sfl1imrufw' name='infection_rate_per_pop_by_date' table='[dbo].[infection_rate_per_pop_by_date]' type='table' />
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='sqlserver.0zkz4gs0iyadev1g24sfl1imrufw' name='infection_rate_per_pop_by_date' table='[dbo].[infection_rate_per_pop_by_date]' type='table' />
        <refresh increment-key='' incremental-updates='false' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[infection_rate_per_pop_by_date]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>50</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>population</remote-name>
            <remote-type>5</remote-type>
            <local-name>[population]</local-name>
            <parent-name>[infection_rate_per_pop_by_date]</parent-name>
            <remote-alias>population</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[date]</local-name>
            <parent-name>[infection_rate_per_pop_by_date]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>3</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>highest_infection_count</remote-name>
            <remote-type>5</remote-type>
            <local-name>[highest_infection_count]</local-name>
            <parent-name>[infection_rate_per_pop_by_date]</parent-name>
            <remote-alias>highest_infection_count</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>percent_pop_infected</remote-name>
            <remote-type>5</remote-type>
            <local-name>[percent_pop_infected]</local-name>
            <parent-name>[infection_rate_per_pop_by_date]</parent-name>
            <remote-alias>percent_pop_infected</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <_.fcp.ObjectModelTableType.true...column caption='infection_rate_per_pop_by_date' datatype='table' name='[__tableau_internal_object_id__].[infection_rate_per_pop_by_date_B2AEB2EBA7D34718B1E39ACB9B9ABFFA]' role='measure' type='quantitative' />
      <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
      <column caption='Highest Infection Count' datatype='real' name='[highest_infection_count]' role='measure' type='quantitative' />
      <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
      <column caption='Percent Pop Infected' datatype='real' name='[percent_pop_infected]' role='measure' type='quantitative' />
      <column caption='Population' datatype='real' name='[population]' role='measure' type='quantitative' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='/Users/john/git/github/repositories/Coronavirus_COVID-19_Deaths/Infection Rate Per Population By Date.hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='07/11/2021 08:59:03 PM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh increment-key='' incremental-updates='false'>
            <refresh-event add-from-file-path='Infection Rate Per Population By Date' increment-value='%null%' refresh-type='create' rows-inserted='101344' timestamp-start='2021-07-11 20:59:03.524' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>location</remote-name>
              <remote-type>129</remote-type>
              <local-name>[location]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>location</remote-alias>
              <ordinal>0</ordinal>
              <family>infection_rate_per_pop_by_date</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>365</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>population</remote-name>
              <remote-type>5</remote-type>
              <local-name>[population]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>population</remote-alias>
              <ordinal>1</ordinal>
              <family>infection_rate_per_pop_by_date</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>365</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>date</remote-name>
              <remote-type>133</remote-type>
              <local-name>[date]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>date</remote-alias>
              <ordinal>2</ordinal>
              <family>infection_rate_per_pop_by_date</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>1631</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>highest_infection_count</remote-name>
              <remote-type>5</remote-type>
              <local-name>[highest_infection_count]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>highest_infection_count</remote-alias>
              <ordinal>3</ordinal>
              <family>infection_rate_per_pop_by_date</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>25036</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>percent_pop_infected</remote-name>
              <remote-type>5</remote-type>
              <local-name>[percent_pop_infected]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>percent_pop_infected</remote-alias>
              <ordinal>4</ordinal>
              <family>infection_rate_per_pop_by_date</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>43055</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:location:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;European Union&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bonaire Sint Eustatius and Saba&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Guernsey&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jersey&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Pitcairn&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sint Maarten (Dutch part)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Timor&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Wallis and Futuna&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Micronesia (country)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;International&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Oceania&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Democratic Republic of Congo&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Northern Cyprus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Falkland Islands&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Vatican&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='infection_rate_per_pop_by_date' id='infection_rate_per_pop_by_date_B2AEB2EBA7D34718B1E39ACB9B9ABFFA'>
            <properties context=''>
              <relation connection='sqlserver.0zkz4gs0iyadev1g24sfl1imrufw' name='infection_rate_per_pop_by_date' table='[dbo].[infection_rate_per_pop_by_date]' type='table' />
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='Infection Rate Per Population' inline='true' name='federated.1byna9q11fxy2o116bijs0iiw57u' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='sunk-sqou-pout-ghig.database.windows.net' name='sqlserver.0acsfaf16ry8ev12wr0nj0r5fe42'>
            <connection authentication='sspi' class='sqlserver' dbname='Coronavirus (COVID-19) Deaths' odbc-native-protocol='yes' one-time-sql='' server='sunk-sqou-pout-ghig.database.windows.net' username='manager01' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='sqlserver.0acsfaf16ry8ev12wr0nj0r5fe42' name='infection_rate_per_pop' table='[dbo].[infection_rate_per_pop]' type='table' />
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='sqlserver.0acsfaf16ry8ev12wr0nj0r5fe42' name='infection_rate_per_pop' table='[dbo].[infection_rate_per_pop]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[infection_rate_per_pop]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>50</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[infection_rate_per_pop_083A9DB641CE47B9A93F384162E3FD1A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>population</remote-name>
            <remote-type>5</remote-type>
            <local-name>[population]</local-name>
            <parent-name>[infection_rate_per_pop]</parent-name>
            <remote-alias>population</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[infection_rate_per_pop_083A9DB641CE47B9A93F384162E3FD1A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>highest_infection_count</remote-name>
            <remote-type>5</remote-type>
            <local-name>[highest_infection_count]</local-name>
            <parent-name>[infection_rate_per_pop]</parent-name>
            <remote-alias>highest_infection_count</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[infection_rate_per_pop_083A9DB641CE47B9A93F384162E3FD1A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>percent_pop_infected</remote-name>
            <remote-type>5</remote-type>
            <local-name>[percent_pop_infected]</local-name>
            <parent-name>[infection_rate_per_pop]</parent-name>
            <remote-alias>percent_pop_infected</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[infection_rate_per_pop_083A9DB641CE47B9A93F384162E3FD1A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <_.fcp.ObjectModelTableType.true...column caption='infection_rate_per_pop' datatype='table' name='[__tableau_internal_object_id__].[infection_rate_per_pop_083A9DB641CE47B9A93F384162E3FD1A]' role='measure' type='quantitative' />
      <column caption='Highest Infection Count' datatype='real' name='[highest_infection_count]' role='measure' type='quantitative' />
      <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
      <column caption='Percent Pop Infected' datatype='real' name='[percent_pop_infected]' role='measure' type='quantitative' />
      <column caption='Population' datatype='real' name='[population]' role='measure' type='quantitative' />
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='/Users/john/git/github/repositories/Coronavirus_COVID-19_Deaths/Infection Rate Per Population.hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='07/11/2021 08:59:52 PM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='Infection Rate Per Population' increment-value='%null%' refresh-type='create' rows-inserted='231' timestamp-start='2021-07-11 20:59:52.354' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>location</remote-name>
              <remote-type>129</remote-type>
              <local-name>[location]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>location</remote-alias>
              <ordinal>0</ordinal>
              <family>infection_rate_per_pop</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>231</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[infection_rate_per_pop_083A9DB641CE47B9A93F384162E3FD1A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>population</remote-name>
              <remote-type>5</remote-type>
              <local-name>[population]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>population</remote-alias>
              <ordinal>1</ordinal>
              <family>infection_rate_per_pop</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>230</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[infection_rate_per_pop_083A9DB641CE47B9A93F384162E3FD1A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>highest_infection_count</remote-name>
              <remote-type>5</remote-type>
              <local-name>[highest_infection_count]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>highest_infection_count</remote-alias>
              <ordinal>2</ordinal>
              <family>infection_rate_per_pop</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>201</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[infection_rate_per_pop_083A9DB641CE47B9A93F384162E3FD1A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>percent_pop_infected</remote-name>
              <remote-type>5</remote-type>
              <local-name>[percent_pop_infected]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>percent_pop_infected</remote-alias>
              <ordinal>3</ordinal>
              <family>infection_rate_per_pop</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>201</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[infection_rate_per_pop_083A9DB641CE47B9A93F384162E3FD1A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='infection_rate_per_pop' id='infection_rate_per_pop_083A9DB641CE47B9A93F384162E3FD1A'>
            <properties context=''>
              <relation connection='sqlserver.0acsfaf16ry8ev12wr0nj0r5fe42' name='infection_rate_per_pop' table='[dbo].[infection_rate_per_pop]' type='table' />
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Death Count'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Death Count Per Population</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Death Count Per Population' name='federated.098nm4v0nec8mj14rutql1l9vilv' />
          </datasources>
          <datasource-dependencies datasource='federated.098nm4v0nec8mj14rutql1l9vilv'>
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[total_death_count]' derivation='Sum' name='[sum:total_death_count:qk]' pivot='key' type='quantitative' />
            <column caption='Total Death Count' datatype='integer' name='[total_death_count]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.098nm4v0nec8mj14rutql1l9vilv].[sum:total_death_count:qk]' included-values='in-range' />
          <slices>
            <column>[federated.098nm4v0nec8mj14rutql1l9vilv].[sum:total_death_count:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='height-header' value='21' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.098nm4v0nec8mj14rutql1l9vilv].[sum:total_death_count:qk]</rows>
        <cols>[federated.098nm4v0nec8mj14rutql1l9vilv].[none:location:nk]</cols>
      </table>
      <simple-id uuid='{12CEE8C6-2B1E-445F-B67B-64CA52E270E3}' />
    </worksheet>
    <worksheet name='Map'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Infection Rate Per Country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Infection Rate Per Population' name='federated.1byna9q11fxy2o116bijs0iiw57u' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1byna9q11fxy2o116bijs0iiw57u'>
            <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column caption='Percent Pop Infected' datatype='real' name='[percent_pop_infected]' role='measure' type='quantitative' />
            <column-instance column='[percent_pop_infected]' derivation='Sum' name='[sum:percent_pop_infected:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.1byna9q11fxy2o116bijs0iiw57u].[Latitude (generated)]' included-values='non-null' />
          <filter class='quantitative' column='[federated.1byna9q11fxy2o116bijs0iiw57u].[Longitude (generated)]' included-values='non-null' />
          <slices>
            <column>[federated.1byna9q11fxy2o116bijs0iiw57u].[Latitude (generated)]</column>
            <column>[federated.1byna9q11fxy2o116bijs0iiw57u].[Longitude (generated)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1byna9q11fxy2o116bijs0iiw57u].[Longitude (generated)]' field-type='quantitative' max='60811716.308995008' min='19240461.041849889' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1byna9q11fxy2o116bijs0iiw57u].[Latitude (generated)]' field-type='quantitative' max='20190773.152777895' min='-15220136.015524022' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.1byna9q11fxy2o116bijs0iiw57u].[none:location:nk]' value='false' />
            <format attr='break-on-special' field='[federated.1byna9q11fxy2o116bijs0iiw57u].[none:location:nk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.1byna9q11fxy2o116bijs0iiw57u].[none:location:nk]' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.1byna9q11fxy2o116bijs0iiw57u].[none:location:nk]' />
              <color column='[federated.1byna9q11fxy2o116bijs0iiw57u].[sum:percent_pop_infected:qk]' />
              <geometry column='[federated.1byna9q11fxy2o116bijs0iiw57u].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1byna9q11fxy2o116bijs0iiw57u].[Latitude (generated)]</rows>
        <cols>[federated.1byna9q11fxy2o116bijs0iiw57u].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{17102320-FF8C-4F40-9920-00CB046E65D9}' />
    </worksheet>
    <worksheet name='Most Affected'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Infection Rate Per Population</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Infection Rate Per Population By Date' name='federated.0u1ua821g7yitl1anssln1msns0r' />
          </datasources>
          <datasource-dependencies datasource='federated.0u1ua821g7yitl1anssln1msns0r'>
            <column-instance column='[percent_pop_infected]' derivation='Avg' name='[avg:percent_pop_infected:qk]' pivot='key' type='quantitative' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column caption='Percent Pop Infected' datatype='real' name='[percent_pop_infected]' role='measure' type='quantitative' />
            <column-instance column='[date]' derivation='Month-Trunc' name='[tmn:date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0u1ua821g7yitl1anssln1msns0r].[none:location:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Brazil&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;United States&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0u1ua821g7yitl1anssln1msns0r].[none:location:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0u1ua821g7yitl1anssln1msns0r].[tmn:date:qk]' value='122' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0u1ua821g7yitl1anssln1msns0r].[none:location:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0u1ua821g7yitl1anssln1msns0r].[avg:percent_pop_infected:qk]</rows>
        <cols>[federated.0u1ua821g7yitl1anssln1msns0r].[tmn:date:qk]</cols>
      </table>
      <simple-id uuid='{03B39F38-9D71-439D-B96D-450C14CF865C}' />
    </worksheet>
    <worksheet name='Totals'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Global Totals</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Global Numbers' name='federated.0lz6pr70qkcq3u11zhke918ey9q8' />
          </datasources>
          <datasource-dependencies datasource='federated.0lz6pr70qkcq3u11zhke918ey9q8'>
            <column caption='Death Percentage' datatype='real' name='[death_percentage]' role='measure' type='quantitative' />
            <column-instance column='[death_percentage]' derivation='Sum' name='[sum:death_percentage:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_cases]' derivation='Sum' name='[sum:total_cases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_deaths]' derivation='Sum' name='[sum:total_deaths:qk]' pivot='key' type='quantitative' />
            <column caption='Total Cases' datatype='real' name='[total_cases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[total_deaths]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0lz6pr70qkcq3u11zhke918ey9q8].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0lz6pr70qkcq3u11zhke918ey9q8].[sum:death_percentage:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0lz6pr70qkcq3u11zhke918ey9q8].[sum:total_cases:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0lz6pr70qkcq3u11zhke918ey9q8].[sum:total_deaths:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0lz6pr70qkcq3u11zhke918ey9q8].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0lz6pr70qkcq3u11zhke918ey9q8].[sum:total_cases:qk]&quot;</bucket>
              <bucket>&quot;[federated.0lz6pr70qkcq3u11zhke918ey9q8].[sum:total_deaths:qk]&quot;</bucket>
              <bucket>&quot;[federated.0lz6pr70qkcq3u11zhke918ey9q8].[sum:death_percentage:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.0lz6pr70qkcq3u11zhke918ey9q8].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0lz6pr70qkcq3u11zhke918ey9q8].[:Measure Names]' value='332' />
            <format attr='height' value='64' />
            <format attr='text-format' field='[federated.0lz6pr70qkcq3u11zhke918ey9q8].[sum:death_percentage:qk]' value='n#,##0.00;-#,##0.00' />
            <format attr='font-family' field='[federated.0lz6pr70qkcq3u11zhke918ey9q8].[:Measure Names]' value='Open Sans' />
            <format attr='text-format' field='[federated.0lz6pr70qkcq3u11zhke918ey9q8].[Multiple Values]' value='n#,##0;-#,##0' />
            <format attr='font-family' field='[federated.0lz6pr70qkcq3u11zhke918ey9q8].[Multiple Values]' value='Open Sans' />
            <format attr='font-family' data-class='subtotal' scope='cols' value='Open Sans' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-family' field='[federated.0lz6pr70qkcq3u11zhke918ey9q8].[:Measure Names]' value='Open Sans' />
            <format attr='font-family' field='[federated.0lz6pr70qkcq3u11zhke918ey9q8].[Multiple Values]' value='Open Sans' />
            <format attr='font-family' scope='cols' value='Open Sans' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.0lz6pr70qkcq3u11zhke918ey9q8].[Multiple Values]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run bold='true' fontname='Open Sans' fontsize='15'>&lt;</run>
                <run bold='true' fontname='Open Sans' fontsize='15'>[federated.0lz6pr70qkcq3u11zhke918ey9q8].[Multiple Values]</run>
                <run bold='true' fontname='Open Sans' fontsize='15'>&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='size' value='0.82359117269515991' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols>[federated.0lz6pr70qkcq3u11zhke918ey9q8].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{8E40485D-D0F1-40BB-AC47-08BE9088113C}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard'>
      <style />
      <size sizing-mode='automatic' />
      <zones>
        <zone h='85134' id='1' name='Map' show-title='false' w='53913' x='1159' y='13369' />
        <zone h='49198' id='4' name='Most Affected' w='42899' x='55652' y='49198' />
        <zone h='47059' id='8' name='Death Count' w='42899' x='55652' y='2139' />
        <zone h='10695' id='2' name='Totals' show-title='false' w='51652' x='2319' y='2139' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1000' minheight='1000' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='16' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98288' id='15' param='vert' type-v2='layout-flow' w='99072' x='464' y='856'>
                <zone fixed-size='86' h='10695' id='2' is-fixed='true' name='Totals' show-title='false' w='51652' x='2319' y='2139'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='47059' id='8' is-fixed='true' name='Death Count' w='42899' x='55652' y='2139'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='85134' id='1' is-fixed='true' name='Map' show-title='false' w='53913' x='1159' y='13369'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49198' id='4' is-fixed='true' name='Most Affected' w='42899' x='55652' y='49198'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{8A4A1569-0B1B-406D-83D2-1434327E351B}' />
    </dashboard>
  </dashboards>
  <windows source-height='93'>
    <window class='worksheet' name='Totals'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <tuple-selection>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.0lz6pr70qkcq3u11zhke918ey9q8].[:Measure Names]</field>
                  </x-fields>
                  <y-fields />
                </pane-descriptor>
                <columns>
                  <field>[federated.0lz6pr70qkcq3u11zhke918ey9q8].[:Measure Names]</field>
                  <field>[federated.0lz6pr70qkcq3u11zhke918ey9q8].[Multiple Values]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;[federated.0lz6pr70qkcq3u11zhke918ey9q8].[sum:death_percentage:qk]&quot;</value>
                <value>2.1687995060340794</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.0lz6pr70qkcq3u11zhke918ey9q8].[:Measure Names]</field>
                  </x-fields>
                  <y-fields />
                </pane-descriptor>
                <columns>
                  <field>[federated.0lz6pr70qkcq3u11zhke918ey9q8].[:Measure Names]</field>
                  <field>[federated.0lz6pr70qkcq3u11zhke918ey9q8].[Multiple Values]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;[federated.0lz6pr70qkcq3u11zhke918ey9q8].[sum:total_deaths:qk]&quot;</value>
                <value>12798240.0</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.0lz6pr70qkcq3u11zhke918ey9q8].[:Measure Names]</field>
                  </x-fields>
                  <y-fields />
                </pane-descriptor>
                <columns>
                  <field>[federated.0lz6pr70qkcq3u11zhke918ey9q8].[:Measure Names]</field>
                  <field>[federated.0lz6pr70qkcq3u11zhke918ey9q8].[Multiple Values]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;[federated.0lz6pr70qkcq3u11zhke918ey9q8].[sum:total_cases:qk]&quot;</value>
                <value>590107106.0</value>
              </tuple>
            </tuple-reference>
          </tuple-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.0lz6pr70qkcq3u11zhke918ey9q8].[:Measure Names]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{25AAFE93-98D0-488C-B521-825FB17C3677}' />
    </window>
    <window class='worksheet' name='Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1byna9q11fxy2o116bijs0iiw57u].[sum:percent_pop_infected:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1byna9q11fxy2o116bijs0iiw57u].[none:location:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{18CB12F8-F125-41D4-961F-A379E2AF3A56}' />
    </window>
    <window class='worksheet' name='Death Count'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.098nm4v0nec8mj14rutql1l9vilv].[none:location:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{340CD719-4092-487B-B1F2-654BB7F7F846}' />
    </window>
    <window class='worksheet' name='Most Affected'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0u1ua821g7yitl1anssln1msns0r].[none:location:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0u1ua821g7yitl1anssln1msns0r].[none:location:nk]</field>
            <field>[federated.0u1ua821g7yitl1anssln1msns0r].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8B60ACCB-8747-4F92-B2E0-073E3CA3636E}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard'>
      <viewpoints>
        <viewpoint name='Death Count'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Map'>
          <zoom type='entire-view' />
          <default-map-tool-selection tool='1' />
        </viewpoint>
        <viewpoint name='Most Affected'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Totals'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <grid grid-overlay-mode='on' />
      <simple-id uuid='{224ADA75-596E-4FA5-9A8D-3F3BE0BBDACC}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Death Count' width='192'>
      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
      qW3Pt5PPAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Map' width='192'>
      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
      DQ1TAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Most Affected' width='192'>
      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
    </thumbnail>
    <thumbnail height='88' name='Totals' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAABYCAYAAACj6fgpAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAABHUlEQVR4nO3WMRGAQBAEQaAwgQL8+3gxOHgkkPHBdMcXbDJVt8855wZRx+oBsJIASBMA
      aQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAm
      ANIEQJoASBMAaefXwRjjjx2wxGcAz3X/sQOW8AKRJgDSBECaAEgTAGkCIE0ApAmANAGQJgDS
      BECaAEgTAGkCIE0ApAmANAGQJgDSBECaAEgTAGkCIE0ApAmANAGQJgDSBECaAEgTAGkCIE0A
      pAmANAGQJgDSBECaAEgTAGkCIE0ApAmANAGQJgDSBECaAEgTAGkCIE0ApAmANAGQJgDSBECa
      AEgTAGkCIE0ApAmANAGQJgDSXiukCEQWpc61AAAAAElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
